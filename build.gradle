buildscript {
	ext {
		springBootVersion = '1.5.8.RELEASE'
        gradleDockerVersion = '1.2'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("se.transmode.gradle:gradle-docker:${gradleDockerVersion}")
	}
}

ext {
	jslackVersion = '1.0.17'
	guavaVersion = '23.0'
	nattyVersion = '0.13'
	commonsLang3Version = '3.6'
	joptSimpleVersion = '5.0.4'
	jacksonDatatypeVersion = '2.9.2'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'

jar {
	baseName = 'carassistant'
	version = '0.1.0'
}

group = 'com.carassistant'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-mongodb')
	compile('org.springframework.boot:spring-boot-starter-data-rest')
	compile('org.springframework.boot:spring-boot-starter-web-services')
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.data:spring-data-rest-hal-browser')

	compile('org.springframework.boot:spring-boot-starter-mail') // Not yet used
	compile('org.springframework.boot:spring-boot-starter-security') // Not yet used
	compile('org.springframework.boot:spring-boot-starter-thymeleaf') // Not yet used
	compile('org.springframework.boot:spring-boot-starter-web') // Not yet used

	compile("com.github.seratch:jslack:${jslackVersion}") // Slack API client

	compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonDatatypeVersion}")  // JSON data format
	compile("com.google.guava:guava:${guavaVersion}")  // Generic utils
	compile("com.joestelmach:natty:${nattyVersion}")  // natural language date parser
	compile("org.apache.commons:commons-lang3:${commonsLang3Version}")  // Generic utils
//	compile("net.sf.jopt-simple:jopt-simple:${joptSimpleVersion}")  // command line parser

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.security:spring-security-test')
}

task buildDocker(type: Docker) {
	description = 'Build Docker image'
    baseImage = 'openjdk:8-jdk-alpine'
    push = false
    tag = "${jar.baseName}"
    addFile {
        from jar
        rename {'app.jar'}
    }
    entryPoint(['java', '-Djava.security.egd=file:/dev/./urandom', '-Dspring.profiles.active=container', '-jar', '/app.jar'])
}

buildDocker.dependsOn(build)
